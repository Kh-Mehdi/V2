#!/usr/bin/env python3
"""
Script de test pour v√©rifier le syst√®me de d√©tection locale
"""

import sys
import os
from pathlib import Path
import time

def test_imports():
    """Test des imports n√©cessaires"""
    print("üß™ Test des imports...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch: {torch.__version__}")
    except ImportError:
        print("‚ùå PyTorch non install√©")
        return False
    
    try:
        import cv2
        print(f"‚úÖ OpenCV: {cv2.__version__}")
    except ImportError:
        print("‚ùå OpenCV non install√©")
        return False
    
    try:
        import numpy as np
        print(f"‚úÖ NumPy: {np.__version__}")
    except ImportError:
        print("‚ùå NumPy non install√©")
        return False
    
    return True

def test_model_file():
    """Test de la pr√©sence du mod√®le"""
    print("\nüìÅ Test du mod√®le...")
    
    model_path = Path("model/yolov5/best_93.pt")
    if model_path.exists():
        size_mb = model_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ Mod√®le trouv√©: {model_path} ({size_mb:.1f} MB)")
        return True
    else:
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return False

def test_yolov5_structure():
    """Test de la structure YOLOv5"""
    print("\nüèóÔ∏è Test structure YOLOv5...")
    
    yolo_path = Path("model/yolov5")
    if not yolo_path.exists():
        print(f"‚ùå Dossier YOLOv5 non trouv√©: {yolo_path}")
        return False
    
    required_files = [
        "detect.py",
        "models/common.py", 
        "utils/general.py",
        "utils/torch_utils.py"
    ]
    
    for file in required_files:
        file_path = yolo_path / file
        if file_path.exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} manquant")
            return False
    
    return True

def test_detector_init():
    """Test d'initialisation du d√©tecteur"""
    print("\nüîß Test initialisation d√©tecteur...")
    
    try:
        from detection_locale import DetectionLocale
        
        print("‚è≥ Chargement du mod√®le...")
        start_time = time.time()
        
        detector = DetectionLocale()
        
        load_time = time.time() - start_time
        print(f"‚úÖ D√©tecteur initialis√© en {load_time:.2f}s")
        print(f"‚úÖ Classes disponibles: {len(detector.classes)}")
        
        for i, cls in enumerate(detector.classes):
            print(f"   {i}: {cls}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur initialisation: {e}")
        return False

def test_sample_detection():
    """Test de d√©tection sur une image de test"""
    print("\nüéØ Test d√©tection...")
    
    try:
        from detection_locale import DetectionLocale
        import cv2
        import numpy as np
        
        # Cr√©er une image de test simple
        test_image = np.zeros((480, 640, 3), dtype=np.uint8)
        test_image.fill(128)  # Gris
        
        # Ajouter du texte pour simuler un panneau
        cv2.putText(test_image, "TEST", (250, 240), 
                   cv2.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 4)
        
        # Sauvegarder temporairement
        test_path = "test_image.jpg"
        cv2.imwrite(test_path, test_image)
        
        # Test de d√©tection
        detector = DetectionLocale()
        results = detector.detect_image(test_path)
        
        # Nettoyer
        os.remove(test_path)
        
        if 'error' in results:
            print(f"‚ùå Erreur d√©tection: {results['error']}")
            return False
        
        print(f"‚úÖ D√©tection effectu√©e")
        print(f"   D√©tections: {results['detection_count']}")
        print(f"   Taille image: {results['image_size']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test d√©tection: {e}")
        return False

def test_webcam():
    """Test rapide de la webcam"""
    print("\nüìπ Test webcam...")
    
    try:
        import cv2
        
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            ret, frame = cap.read()
            cap.release()
            
            if ret:
                print(f"‚úÖ Webcam accessible ({frame.shape})")
                return True
            else:
                print("‚ùå Impossible de lire depuis la webcam")
                return False
        else:
            print("‚ùå Impossible d'ouvrir la webcam")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur webcam: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=" * 50)
    print("üö¶ TEST SYST√àME D√âTECTION LOCALE")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Mod√®le", test_model_file), 
        ("Structure YOLOv5", test_yolov5_structure),
        ("Initialisation", test_detector_init),
        ("D√©tection", test_sample_detection),
        ("Webcam", test_webcam)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: R√âUSSI")
            else:
                print(f"‚ùå {test_name}: √âCHEC")
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä R√âSULTAT: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le syst√®me est pr√™t.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
    
    print("=" * 50)
    
    return passed == total

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
